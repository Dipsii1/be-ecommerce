generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String
  role       String    @default("user")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  carts      Cart[]
  orders     Order[]

  @@map("users")
}

model MerchantProfile {
  id         Int       @id @default(autoincrement())
  shopName   String
  email      String    @unique
  password   String
  address    String?
  latitude   Float?
  longitude  Float?
  role       String    @default("merchant")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  products   Product[]

  @@map("merchant_profiles")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  category    String?         // üç± e.g. "Snack", "Drink", "Frozen Food"
  imageUrl    String?         // üì∏ URL of the product image
  price       Float
  stock       Int       @default(0)
  expired     DateTime?       // ‚è∞ Expiration date
  isExpired   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  merchantId  Int

  // Relations
  merchant    MerchantProfile @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([expired])
  @@index([name])
  @@map("products")
}

model Cart {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      CartItem[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int      @default(1)
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Order {
  id             Int        @id @default(autoincrement())
  userId         Int
  total          Float
  status         String     @default("PENDING") // PENDING, PAID, SHIPPED, COMPLETED, CANCELLED
  paymentMethod  String?                      // CASH, TRANSFER, EWALLET
  createdAt      DateTime   @default(now())
  completedAt    DateTime?                    // When the order is finished

  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items          OrderItem[]

  @@index([status])
  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
